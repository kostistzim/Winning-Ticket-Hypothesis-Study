[project]
name = "winning-ticket-hypothesis-study"
version = "0.1.0"
description = "Reproducing the Lottery Ticket Hypothesis results with LeNet-300-100 on MNIST"
requires-python = ">=3.9"

dependencies = [
    "torch>=2.4.0",
    "torchvision>=0.19.0",
    "tqdm>=4.66.4",
    "matplotlib>=3.9.2",
    "pandas>=2.2.2",
    "numpy>=1.26.4",
    "argparse>=1.4.0",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
# Same excludes as black
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".github",
    ".cursorrules",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # ---- project specific ----
    # Exclude tools so they don't get the __future__ imports
    "Lenet-300-100/*",
    "CNN/*"

]

line-length = 120
indent-width = 4

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "W",    # pycodestyle warnings
    "D",    # pycodestyle docstrings
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade (includes UP006 to enforce future annotations)
    "N",    # pep8-naming
    "ANN",  # flake8-annotations
    "PT",   # flake8-pytest-style
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TRY",  # tryceratops
    "PYI",  # flake8-pyi
]
ignore = [
    "E722",  # Equivalent to pylint's broad-except-caught (W0718)
    "B023",  # Roughly equivalent to logging-fstring-interpolation (W1203)
    "E501",  # Line too long (handled by formatter)
    "TRY003",  # Tryceratops: long raise message
]
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Add rules to enforce native Python types over typing
extend-select = [
    "UP006",  # Use `__future__.annotations` to postpone evaluation of annotations
    "UP007",  # Use X | Y for type annotations
]

[tool.ruff.lint.isort]
known-first-party = ["medic_reasoning"]
required-imports = ["from __future__ import annotations"]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
namespace_packages = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
files = ["par"]
exclude = [
    "data/**",
    "notebooks/**",
    "medic_reasoning/utils/probing.py",
]

[tool.pyright]
typeCheckingMode = "off"
ignore = ["*"]
